service: serverless-upload-mamer
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs4.3
  region: ap-southeast-1
  stage: dev
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "*"
      Resource: "*"

functions:
  # generate:
  #   handler: handler.generate
  #   events:
  #     - http:
  #         path: process
  #         method: post
  #         contentHandling: CONVERT_TO_BINARY
  #         cors: true

  requestUploadUrl:
    handler: handler.requestUploadUrl
    events:
      - http:
          path: requestUploadUrl
          method: post
          cors: true

  testURL:
    handler: handler.testURL
    events:
      - http:
          path: testURL
          method: get
          cors: true

# resources:
#   Resources:
#     S3BucketSmartspark:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: smartspark
#     SendImageToS3LambdaPermissionSmartsparkS3:
#       Type: "AWS::Lambda::Permission"
#       Properties:
#         FunctionName:
#           "Fn::GetAtt":
#             - SendImageToS3LambdaFunction
#             - Arn
#         Principal: "s3.amazonaws.com"
#         Action: "lambda:InvokeFunction"
#         SourceAccount:
#           Ref: AWS::AccountId
#         SourceArn: "arn:aws:s3:::smartspark"

# resources:
#   Resources:
#     UploadBucket:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: smartspark
#         AccessControl: PublicRead
#         CorsConfiguration:
#           CorsRules:
#           - AllowedMethods:
#             - GET
#             - PUT
#             - POST
#             - HEAD
#             AllowedOrigins:
#             - "*"
#             AllowedHeaders:
#             - "*"

custom:
  optimize:
    minify: true
    presets: ["env"]
  bucket:
    - smartspark

plugins:
  - serverless-plugin-optimize
  # - serverless-plugin-bespoken
  # - serverless-package-plugin
  # - serverless-offline
